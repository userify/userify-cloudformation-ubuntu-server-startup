#!/bin/bash -x
#
# Userify Startup
# Auto restart with 3 seconds.
#

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi

cd /opt/userify-server

source /etc/userify-defaults.cfg

# set defaults if not specified in configuration file:
if [ "x$LDAP_SEARCH_FILTER" == "x" ]; then
  # Active Directory:
  LDAP_SEARCH_FILTER="(&(objectCategory=person)(objectClass=user)(sAMAccountName=USERNAME))"
fi
if [ "x$LDAP_ATTR_MAIL" == "x" ]; then
  LDAP_ATTR_MAIL="mail"
fi
if [ "x$SHIM_DELAY" == "x" ]; then
  SHIM_DELAY="5"
fi
if [ "x$SELF_SIGNED" == "x" ]; then
  SELF_SIGNED="true"
fi
if [ "x$REDIS_DB" == "x" ]; then
  REDIS_DB="0"
fi
if [ "x$MAIL_SSL_DISABLED" == "x" ]; then
  MAIL_SSL_DISABLED="false"
fi
if [ "x$MAIL_SUBJECT_WORD" == "x" ]; then
  MAIL_SUBJECT_WORD="Userify Enterprise"
fi

# Escape backslash for CORP\USERNAME to prevent converting to '\U'
LDAP_USERNAME_TEMPLATE="$(echo "$LDAP_USERNAME_TEMPLATE" | sed 's/\\/\\\\/g')"

# RECOMMENDED KERNEL SETTINGS
# for Userify:
/sbin/sysctl -w fs.file-max=1048576
ulimit -n 1048576
# recommended for local Redis:
/sbin/sysctl vm.overcommit_memory=1
echo never > /sys/kernel/mm/transparent_hugepage/enabled

# set up virtualenv
if [ -d /opt/userify-server/python/ ]; then
    source /opt/userify-server/python/bin/activate
    export PYTHONPATH=/opt/userify-server/python/lib/python2.7/site-packages/
    export PYTHONHOME=/opt/userify-server/python/
fi

# generate first base config
if [ ! -f /opt/userify-server/base_config.cfg ]; then
    
    CRYPTO_KEY="$(echo -n "$CRYPTOSEED"|sha256sum|cut -d ' ' -f1)"
    cat <<BASE_CONFIG_EOF > /opt/userify-server/base_config.cfg
{
  "already_sent_crypto_key": true,
  "crypto_key": "$CRYPTO_KEY",
  "s3endpoint": "$S3_ENDPOINT",
  "s3_region": "$S3_REGION",
  "bucket_name": "$S3_BUCKET",
  "sa_username": "$CLUSTER_ADMIN_USERNAME",
  "sa_password": "$CLUSTER_ADMIN_PASSWORD",
  "redis_host": "$REDIS_HOST",
  "redis_db": "$REDIS_DB",
  "redis_passwd": "$REDIS_PASSWD",
  "redis_port": "$REDIS_PORT"
}
BASE_CONFIG_EOF

    set +e

    # Remove the original 'seed' and admin password (although
    # still available through instance metadata) :(
    sed -i "s/CRYPTOSEED.*//" /etc/userify-defaults.cfg
    sed -i "s/CLUSTER_ADMIN_PASSWORD.*//" /etc/userify-defaults.cfg

    # Introduce a bit of jitter to not have ASG instances not
    # try to write-before-read multiple configs simultaneously
    # (although that won't matter much anyway on first startup)
    sleep .$(( $RANDOM / 100 ))

    ## CREATE INITIAL CONFIG:CONFIG (only if base_config is already not existing anyway)

    if ! aws s3 ls s3://$S3_BUCKET/config:config; then

        # do not overwrite existing config if error occurs:
        set -e

        # doesn't exist. create a new (unencrypted) config:
        cat << CONFIG_EOF > config\:config.decr
{
  "config_version": "1.0",
  "contact_comments": "$CONTACT_COMMENTS",
  "contact_company": "$CONTACT_COMPANY",
  "contact_email": "$CONTACT_EMAIL",
  "contact_name": "$CONTACT_NAME",
  "debug": false,
  "failed_attempt_max_per_second": 1,
  "fully_configured": true,
  "introduce_latency": 0,
  "ldap_attr_mail": "$LDAP_ATTR_MAIL",
  "ldap_email": "$LDAP_EMAIL",
  "ldap_host": "$LDAP_HOST",
  "ldap_password": "$LDAP_PASSWORD",
  "ldap_realm": "$LDAP_REALM",
  "ldap_search_filter": "$LDAP_SEARCH_FILTER",
  "ldap_username_template": "$LDAP_USERNAME_TEMPLATE",
  "license_code": "$LICENSE_CODE",
  "loghost": "$LOGHOST",
  "mail_bgcolor_danger": "#D62A2A",
  "mail_bgcolor_info": "#0084D6",
  "mail_bgcolor_safe": "#00BC00",
  "mail_bgcolor_warning": "#D68000",
  "mail_from_addr": "$MAIL_FROM_ADDR",
  "mail_notification_subject_word": "$MAIL_SUBJECT_WORD",
  "mail_password": "$MAIL_PASSWORD",
  "mail_server": "$MAIL_SERVER",
  "mail_ssl_disabled": "$MAIL_SSL_DISABLED",
  "mail_username": "$MAIL_USERNAME",
  "max_file_upload_size": 33554432,
  "rate_limit_per_user_per_second": 10,
  "redis_host": "$REDIS_HOST",
  "redis_db": "$REDIS_DB",
  "redis_passwd": "$REDIS_PASSWD",
  "redis_port": "$REDIS_PORT",
  "sa_username": "$CLUSTER_ADMIN_USERNAME",
  "sa_password": "$CLUSTER_ADMIN_PASSWORD",
  "self_signed": "$SELF_SIGNED",
  "shim_configuration_server": "$ELB_NAME",
  "shim_delay": "$SHIM_DELAY",
  "shim_installer_server": "$ELB_NAME",
  "storage_layer_s3_CompanyStorage_bucket_name": "$S3_BUCKET",
  "storage_layer_s3_CompanyStorage_keyname": "company",
  "storage_layer_s3_CompanyStorage_public": false,
  "storage_layer_s3_CompanyStorage_s3endpoint": "$S3_ENDPOINT",
  "storage_layer_s3_ConfigStorage_bucket_name": "$S3_BUCKET",
  "storage_layer_s3_ConfigStorage_keyname": "config",
  "storage_layer_s3_ConfigStorage_public": false,
  "storage_layer_s3_ConfigStorage_s3endpoint": "$S3_ENDPOINT",
  "storage_layer_s3_DataStorage_bucket_name": "$S3_BUCKET",
  "storage_layer_s3_DataStorage_keyname": "data",
  "storage_layer_s3_DataStorage_public": false,
  "storage_layer_s3_DataStorage_s3endpoint": "$S3_ENDPOINT",
  "storage_layer_s3_InvitationStorage_bucket_name": "$S3_BUCKET",
  "storage_layer_s3_InvitationStorage_keyname": "invitation",
  "storage_layer_s3_InvitationStorage_public": false,
  "storage_layer_s3_InvitationStorage_s3endpoint": "$S3_ENDPOINT",
  "storage_layer_s3_PhotoStorage_bucket_name": "$S3_BUCKET",
  "storage_layer_s3_PhotoStorage_keyname": "photo",
  "storage_layer_s3_PhotoStorage_public": false,
  "storage_layer_s3_PhotoStorage_s3endpoint": "$S3_ENDPOINT",
  "storage_layer_s3_UserStorage_bucket_name": "$S3_BUCKET",
  "storage_layer_s3_UserStorage_keyname": "user",
  "storage_layer_s3_UserStorage_public": false,
  "storage_layer_s3_UserStorage_s3endpoint": "$S3_ENDPOINT",
  "storage_layer_s3_UsernameStorage_bucket_name": "$S3_BUCKET",
  "storage_layer_s3_UsernameStorage_keyname": "username",
  "storage_layer_s3_UsernameStorage_public": false,
  "storage_layer_s3_UsernameStorage_s3endpoint": "$S3_ENDPOINT",
  "tls_crt": "$TLS_CRT",
  "tls_key": "$TLS_KEY",
  "web_server_url": "https://$ELB_NAME"
}
CONFIG_EOF

        # now encrypt it using ucrypt and the encrypted crypto key above:
        ucrypt -i config\:config.decr -o config\:config

        set +e

        # .. and, upload it to the bucket.
        aws s3 cp config\:config s3://$S3_BUCKET/config:config

        # we're done. remove the old file.
        rm config\:config.decr config\:config

        # finished writing and uploading initial config:config

    fi

# finished writing base_config
fi

# actually start (or restart) userify-server:
(while true;
do

    chmod +x /opt/userify-server/userify-server

    # reconfigure environment in case it was modified:
    if [ -d /opt/userify-server/python/ ]; then
        source /opt/userify-server/python/bin/activate
        export PYTHONPATH=/opt/userify-server/python/lib/python2.7/site-packages/
        export PYTHONHOME=/opt/userify-server/python/
    fi

    # userify automatically attempts to bind to 443 and 80
    # (dropping permissions after startup)
    # but will not produce an error unless it cannot bind
    # HTTP to localhost:8120 or the port number specified here.

    # For additional performance, use HA Proxy or nginx to:
    #   proxy to localhost for /api/
    #   static files to /opt/userify-server/web/

    /opt/userify-server/userify-server \
       2>&1 \
        | tee /var/log/userify-server.log \
        | logger -t userify-server

    sleep 3

done) &
